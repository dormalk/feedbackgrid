{"version":3,"sources":["helpers/uid.js","helpers/text.js","pages/GridView/components/AddInput/AddInput.js","pages/GridView/components/Reactions/Reactions.js","pages/GridView/components/Feedback/Feedback.js","pages/GridView/components/Col/Col.js","pages/GridView/components/Grid/Grid.js","hooks/grid-hook.js","pages/GridView/GridView.js"],"names":["myUid","generateUid","Math","random","toString","substr","getMyUid","localStorage","getItem","newUid","setItem","isRTL","s","RegExp","test","iconPath","AddInput","className","onNew","useState","isOpen","setIsOpen","inputRef","useRef","inputValue","setInputValue","handleSend","event","preventDefault","stopPropagation","type","style","direction","ref","placeholder","value","onKeyUp","keyCode","onChange","target","onBlur","setTimeout","src","alt","onMouseDown","current","focus","Reactions","dislikes","loves","celebrates","evils","onPick","onClick","Feedback","reactions","votes","onReaction","createdBy","onDelete","opacityOnHightlight","console","log","handleReaction","useCallback","reaction","uid","myVote","opacity","right","left","calcSumOfReactions","sum","key","Col","title","icon","onUpdate","feedbacks","userCounter","bodyRef","highlightMode","setHighlightMode","React","useEffect","totalReactionsSum","forEach","feedback","maxReactionsCount","length","sort","a","b","map","item","index","id","newItems","findIndex","cid","splice","handleDelete","createBy","handleReactions","createdItem","updatedItems","concat","scrollTop","scrollHeight","ColsData","DELTEA","window","innerWidth","styles","col","backgroundRepeat","backgroundSize","backgroundPosition","backgroundImage","process","colFirst","colLast","Grid","isLoading","findCol","onColUpdate","errorMessage","gridRef","handleEndTouch","scrollLeft","currentOffset","currentCol","floor","scrollTo","behavior","addEventListener","Fragment","error","socket","socketIOClient","useGrid","gid","gridId","setGridId","gridCols","setGridCols","setIsLoading","setErrorMessage","setUserCounter","mode","URLSearchParams","useLocation","search","get","navigate","useNavigate","fetchGrid","fetch","then","res","json","grid","cols","catch","err","updateErrorMessage","finally","initGrid","emit","room","on","_","count","tempCols","find","name","method","body","JSON","stringify","headers","msg","GridView","useParams","visited","setVisited","Header"],"mappings":"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","file":"static/js/4.0da41cc3.chunk.js","sourcesContent":["export const generateUid = () => {\r\n    return Math.random().toString(36).substr(2, 9);\r\n}\r\nlet myUid;\r\nexport const getMyUid = () => {\r\n    if(!myUid){\r\n        myUid = localStorage.getItem('myUid');\r\n    }\r\n    if (myUid) {\r\n        return myUid;\r\n    } else {\r\n        const newUid = generateUid();\r\n        localStorage.setItem('myUid', newUid);\r\n        return newUid;\r\n    }\r\n}\r\n\r\nexport default generateUid;","\r\nexport const isRTL = (s) => {\r\n    var ltrChars    = 'A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02B8\\u0300-\\u0590\\u0800-\\u1FFF'+'\\u2C00-\\uFB1C\\uFDFE-\\uFE6F\\uFEFD-\\uFFFF',\r\n    rtlChars    = '\\u0591-\\u07FF\\uFB1D-\\uFDFD\\uFE70-\\uFEFC',\r\n    rtlDirCheck = new RegExp('^[^'+ltrChars+']*['+rtlChars+']');\r\n    return rtlDirCheck.test(s);\r\n}","import React,{useState, useRef} from \"react\";\r\nimport './AddInput.css'\r\nimport { isRTL } from \"../../../../helpers/text\";\r\n\r\nconst iconPath = process.env.PUBLIC_URL + '/assets/icons/';\r\n\r\nconst AddInput = ({className, onNew}) => {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const inputRef = useRef(null);\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleClickPlus = (event) => {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        setIsOpen(true);\r\n        inputRef.current.focus();\r\n    }\r\n\r\n    const handleSend = (event) => {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        onNew(inputValue);\r\n        setInputValue('')\r\n    }\r\n\r\n    const handleChangeInput = (event) => {\r\n        setInputValue(event.target.value);\r\n    }\r\n\r\n    const onKeyUpHandler = (event) => {\r\n        if(event.keyCode === 13) {\r\n            handleSend(event);\r\n        }\r\n    }\r\n\r\n\r\n    return <div className={`wrapper ${className}`}>\r\n        <div className={`input-wrapper ${isOpen ? 'open' : ''}`}>\r\n            <input  type=\"text\" \r\n                    style={{direction: isRTL(inputValue) ? 'rtl' : 'ltr'}}\r\n                    ref={inputRef}\r\n                    placeholder=\"Add new item\" \r\n                    value={inputValue}\r\n                    onKeyUp={onKeyUpHandler}\r\n                    onChange={handleChangeInput}\r\n                    onBlur={() => setTimeout(() => setIsOpen(false), 200)}\r\n                    className=\"c-input\"/>\r\n        </div>\r\n        {\r\n            isOpen ? \r\n            <img    src={`${iconPath}send.png`} \r\n                    alt=\"\" \r\n                    onMouseDown={handleSend}\r\n                    className=\"send-btn\"/>:\r\n            <img    src={`${iconPath}plus.png`} \r\n                    alt=\"\" \r\n                    onMouseDown={handleClickPlus}\r\n                    className=\"new-btn\"/>\r\n        }\r\n    </div>\r\n}\r\n\r\nexport default AddInput;","import React from 'react';\r\nimport './Reactions.css'\r\nconst iconPath = process.env.PUBLIC_URL + '/assets/icons/';\r\n\r\n\r\nconst Reactions = ({dislikes,loves,celebrates,evils, onPick}) => {\r\n    return <div className=\"reactions\">\r\n        <div className=\"reaction\" onClick={()=>onPick('loves')}>\r\n            <span>{loves}</span>\r\n            <img    src={`${iconPath}heart-color.png`} \r\n                    alt=\"heart\"/>\r\n        </div>\r\n        <div className=\"reaction\" onClick={()=>onPick('dislikes')}>\r\n            <span>{dislikes}</span>\r\n            <img    src={`${iconPath}dislike-color.png`} \r\n                    alt=\"dislike\"/>\r\n        </div>\r\n        <div className=\"reaction\" onClick={()=>onPick('celebrates')}>\r\n            <span>{celebrates}</span>\r\n            <img    src={`${iconPath}confetti-color.png`} \r\n                    alt=\"confetti\"/>\r\n        </div>\r\n        <div className=\"reaction\" onClick={()=>onPick('evils')}>\r\n            <span>{evils}</span>\r\n            <img    src={`${iconPath}devil-color.png`} \r\n                    alt=\"evil\"/>\r\n        </div>\r\n        \r\n    </div>\r\n}\r\n\r\nexport default Reactions;","import React,{useCallback} from \"react\";\r\nimport './Feedback.css'\r\nimport Reactions from \"../Reactions/Reactions\";\r\nimport { getMyUid } from \"../../../../helpers/uid\";\r\nimport { isRTL } from \"../../../../helpers/text\";\r\n\r\nconst Feedback = ({value, reactions,votes,onReaction,createdBy, onDelete, opacityOnHightlight}) => {\r\n    console.log(reactions)\r\n    console.log(votes)\r\n    const handleReaction = useCallback((reaction) => {\r\n        const uid = getMyUid();\r\n        const myVote = votes[uid];\r\n        if(!!myVote && myVote !== ''){\r\n            reactions[myVote]--\r\n        }\r\n        votes[uid] = reaction;\r\n        reactions[reaction]++;\r\n        onReaction({reactions,votes});\r\n\r\n    },[onReaction, votes, reactions])\r\n\r\n\r\n    return <div className=\"card\" style={{opacity: opacityOnHightlight ? '0.6' : '1'}}>\r\n        {createdBy === getMyUid() && <div className=\"card-remove\" onClick={onDelete} style={{right: isRTL(value) ? 'unset' : '1rem', left: isRTL(value) ? '1rem' : 'unset'}}>x</div>}\r\n        <div className={`card-body ${isRTL(value) ? 'rtl' : ''}`} >{value}</div>\r\n        <hr/>\r\n        <div className=\"card-footer\">\r\n            <Reactions  evils={reactions.evils} \r\n                        dislikes={reactions.dislikes}\r\n                        loves={reactions.loves}\r\n                        onPick={handleReaction}\r\n                        celebrates={reactions.celebrates}/>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default Feedback;","import React,{useRef,useState} from \"react\";\r\nimport AddInput from \"../AddInput/AddInput\";\r\nimport Card from \"../Feedback/Feedback\";\r\nimport './Col.css'\r\nimport {getMyUid, generateUid} from \"../../../../helpers/uid\";\r\nconst iconPath = process.env.PUBLIC_URL + '/assets/icons/';\r\n\r\n\r\nconst HIGHTLIGHT_MODE_PRESENT_VALUE = 0.9;\r\n\r\nconst calcSumOfReactions = reactions => {\r\n    let sum = 0;\r\n    for(let key in reactions){\r\n        sum += reactions[key];\r\n    }\r\n    return sum;\r\n}\r\n\r\nconst Col = ({title, icon, onUpdate,feedbacks = [], style={}, userCounter}) => {\r\n    const bodyRef = useRef(null);\r\n    const [highlightMode,setHighlightMode] = useState(false);\r\n\r\n    React.useEffect(() => {\r\n        let totalReactionsSum = 0;\r\n        feedbacks.forEach(feedback => totalReactionsSum += calcSumOfReactions(feedback.reactions));\r\n        const maxReactionsCount = userCounter * feedbacks.length; \r\n        if(maxReactionsCount > 0 && totalReactionsSum / maxReactionsCount > HIGHTLIGHT_MODE_PRESENT_VALUE){\r\n            setHighlightMode(true);\r\n        } else {\r\n            setHighlightMode(false);\r\n        }\r\n    },[userCounter,feedbacks])\r\n\r\n    const handleNewItem = (value) => {\r\n        if(value === '') return;\r\n        const createdItem = {\r\n            value,\r\n            cid: generateUid(),\r\n            createBy: getMyUid(),\r\n            reactions: {\r\n                evils: 0,\r\n                dislikes: 0,\r\n                loves: 0,\r\n                celebrates: 0,\r\n            },\r\n            votes:{}\r\n        }\r\n        const updatedItems = feedbacks.concat(createdItem); \r\n        setTimeout(() => {\r\n            bodyRef.current.scrollTop = bodyRef.current.scrollHeight;\r\n        })\r\n        onUpdate(updatedItems);\r\n    }\r\n\r\n    const handleReactions = ({reactions,votes},id) => {\r\n        const index = feedbacks.findIndex(item => item.cid === id);\r\n        const newItems = [...feedbacks];\r\n        newItems[index] = {\r\n            ...newItems[index],\r\n            votes,\r\n            reactions\r\n        } ;\r\n        onUpdate(newItems);\r\n    }\r\n\r\n    const handleDelete = (id) => {\r\n        const newItems = [...feedbacks];\r\n        const index = newItems.findIndex(item => item.cid === id);\r\n        newItems.splice(index,1);\r\n        onUpdate(newItems);\r\n    }\r\n\r\n    const buildFeedbacks = () => {\r\n        return feedbacks.sort((a,b) => calcSumOfReactions(b.reactions) - calcSumOfReactions(a.reactions))\r\n                        .map((item,index) =>\r\n                            <Card   value={item.value}\r\n                                    key={item.cid}\r\n                                    onDelete={() => handleDelete(item.cid)}\r\n                                    votes={item.votes}\r\n                                    createdBy={item.createBy}\r\n                                    reactions={item.reactions}\r\n                                    opacityOnHightlight={highlightMode && calcSumOfReactions(item.reactions) === 0}\r\n                                    onReaction={(value) => handleReactions(value,item.cid)}/>\r\n        )\r\n    }\r\n    \r\n    return <div className={`col ${highlightMode ? 'hightlight' : ''}`} style={style}>\r\n        <div className=\"top\">\r\n            <img src={`${iconPath}${icon}.png`} alt=\"\" className=\"icon\"/>\r\n            <div className=\"title\">{title}</div>\r\n        </div>\r\n        <div className=\"body\" ref={bodyRef}>\r\n            {buildFeedbacks()}\r\n        </div>\r\n        <div className=\"footer\">\r\n            <AddInput className=\"add-input\" onNew={handleNewItem}/>\r\n        </div>\r\n    </div>\r\n};\r\n\r\n\r\n\r\nexport default Col;","import React,{useRef, useCallback} from \"react\";\r\nimport Col from \"../Col/Col\";\r\nimport './Grid.css'\r\nimport { ErrorSnack } from \"../../../../shared/components\";\r\n\r\n\r\nconst ColsData = [\r\n    {\r\n        title: \"Things I Loves\",\r\n        icon: \"heart\",\r\n        id: \"things_love\",\r\n    },\r\n    {\r\n        title: \"Things I dislike\",\r\n        icon: \"dislike\",\r\n        id: \"things_dislike\",\r\n    },\r\n    {\r\n        title: \"Things I wants to improves\",\r\n        icon: \"improve\",\r\n        id: \"things_improve\",\r\n    },\r\n    {\r\n        title: \"New things I have\",\r\n        icon: \"innovation\",\r\n        id: \"things_new\",\r\n    },\r\n]\r\n\r\nconst DELTEA = window.innerWidth / 2;\r\n\r\nconst Grid = ({isLoading, findCol, onColUpdate,errorMessage,userCounter}) => {\r\n    const gridRef = useRef(null);\r\n    \r\n    const handleEndTouch = useCallback(event => {\r\n        const { scrollLeft } = gridRef.current;\r\n        const currentOffset = scrollLeft % window.innerWidth;\r\n        const currentCol = Math.floor(scrollLeft / window.innerWidth);\r\n\r\n        if(currentOffset > DELTEA){\r\n            gridRef.current.scrollTo({\r\n                left: (currentCol + 1) * window.innerWidth,\r\n                behavior: 'smooth'\r\n            });\r\n        } else {\r\n            gridRef.current.scrollTo({\r\n                left: currentCol * window.innerWidth,\r\n                behavior: 'smooth'\r\n            });\r\n        }\r\n\r\n    },[])\r\n    React.useEffect(() => {\r\n        gridRef.current.addEventListener(\"touchend\", handleEndTouch)\r\n        gridRef.current.scrollLeft = 0;\r\n    },[handleEndTouch])\r\n\r\n    return <React.Fragment>\r\n        <div className=\"grid\" ref={gridRef}>\r\n        {isLoading ?    <div className=\"loader\"></div> :\r\n                            ColsData.map((col,index) => <Col    key={col.id}\r\n                                                                title={col.title}\r\n                                                                icon={col.icon}\r\n                                                                userCounter={userCounter}\r\n                                                                style={ index === 0 ? \r\n                                                                        styles.colFirst : \r\n                                                                        index === ColsData.length - 1 ? \r\n                                                                        styles.colLast : styles.col}\r\n                                                                onUpdate={(feedbacks) => onColUpdate(col.id,feedbacks)}\r\n                                                                feedbacks={findCol(col.id)}/>)}\r\n        </div>\r\n        <ErrorSnack error={errorMessage}/>\r\n        </React.Fragment>\r\n};\r\n\r\nconst styles = {\r\n    col: window.innerWidth < 480 ? {\r\n        backgroundRepeat: 'no-repeat, no-repeat',\r\n        backgroundSize: '1.5rem, 1.5rem',\r\n        backgroundPosition: 'center right 0.5rem ,center left 0.5rem',\r\n        backgroundImage: `url(${process.env.PUBLIC_URL}/assets/icons/right-arrow.png), url(${process.env.PUBLIC_URL}/assets/icons/left-arrow.png)`,\r\n    }:{},\r\n    colFirst: window.innerWidth < 480 ? {\r\n        backgroundRepeat: 'no-repeat',\r\n        backgroundSize: '1.5rem',\r\n        backgroundPosition: 'center right 0.5rem ',\r\n        backgroundImage: `url(${process.env.PUBLIC_URL}/assets/icons/right-arrow.png)`,\r\n    }:{},\r\n    colLast: window.innerWidth < 480 ?  {\r\n        backgroundRepeat: 'no-repeat',\r\n        backgroundSize: '1.5rem',\r\n        backgroundPosition: 'center left 0.5rem',\r\n        backgroundImage: `url(${process.env.PUBLIC_URL}/assets/icons/left-arrow.png)`,\r\n    }:{}\r\n}\r\n\r\n\r\nexport default Grid;","import {useState,useEffect,useCallback} from 'react';\r\nimport { useLocation } from 'react-router';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport socketIOClient from \"socket.io-client\";\r\nconst socket = socketIOClient(process.env.REACT_APP_BACKEND_URL);\r\n\r\n\r\nconst useGrid = (gid) => {\r\n    const [gridId, setGridId] = useState();\r\n    const [gridCols, setGridCols] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [errorMessage, setErrorMessage] = useState();\r\n    const [userCounter, setUserCounter] = useState(0);\r\n\r\n\r\n    const mode = new URLSearchParams(useLocation().search).get('mode');\r\n    let navigate = useNavigate();\r\n    const fetchGrid = useCallback((gid) => {\r\n        fetch(`${process.env.REACT_APP_BACKEND_URL}/api/grid/${gid}`)\r\n        .then(res => res.json())\r\n        .then(res => {\r\n            console.log(res.grid.cols);\r\n            setGridCols(res.grid.cols)\r\n        })\r\n        .catch(err => {\r\n            if(mode === 'new') updateErrorMessage('We Could not fetch grid, please check you connection');\r\n            else if(mode === 'join') navigate('/');\r\n        })\r\n        .finally(() => setIsLoading(false))\r\n    },[mode,navigate])\r\n\r\n    const initGrid = useCallback(() => {\r\n        if(gid !== null) {\r\n            setGridId(gid)\r\n            fetchGrid(gid);\r\n            socket.emit('join', {room: gid});\r\n    \r\n            socket.on(\"updateTable\", _ => {\r\n                fetchGrid(gid);\r\n            });\r\n\r\n            socket.on(\"usersCount\", count => {\r\n                setUserCounter(count);\r\n            });\r\n        } else {\r\n            updateErrorMessage(\"Grid not found\");\r\n        }\r\n    },[gid,fetchGrid]);\r\n\r\n    useEffect(() => {\r\n        initGrid();\r\n    },[initGrid])\r\n\r\n    \r\n\r\n \r\n\r\n    const findCol = (id) => {\r\n        const col = gridCols.find(col => col.name === id)\r\n        if(col) return col.feedbacks;\r\n        return []\r\n    }\r\n\r\n    const onColUpdate = useCallback((id, feedbacks) => {\r\n        const tempCols = gridCols;\r\n        console.log(gridCols) \r\n        const col = tempCols.find(col => col.name === id)\r\n        if(col) {\r\n            setGridCols([...tempCols])\r\n            col.feedbacks = feedbacks;\r\n            fetch(`${process.env.REACT_APP_BACKEND_URL}/api/grid/${gridId}`, {\r\n                method: 'POST',\r\n                body: JSON.stringify({\r\n                    grid: {\r\n                        cols: tempCols\r\n                    }}),\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            })\r\n            .then(_ => {\r\n                socket.emit('updateRequest');\r\n            })\r\n            .catch(err => console.log(err))\r\n        }\r\n    },[gridCols, gridId])\r\n\r\n\r\n    const updateErrorMessage = (msg) => {\r\n        setErrorMessage(msg);\r\n        setTimeout(() => {\r\n            setErrorMessage(null);\r\n        },3000)\r\n    }\r\n\r\n    return {isLoading, findCol, onColUpdate, errorMessage,userCounter}\r\n}\r\n\r\n\r\nexport default useGrid;","import React,{useState} from 'react';\r\nimport Header from '../../shared/components/Header/Header.js';\r\nimport Grid from './components/Grid/Grid.js';\r\nimport { useParams } from \"react-router\";\r\nimport useGrid from \"../../hooks/grid-hook\";\r\nimport './GridView.css'\r\n\r\n\r\nconst GridView = () => {\r\n    const { gid } = useParams();\r\n    const {isLoading, findCol, onColUpdate,errorMessage, userCounter} = useGrid(gid);\r\n    const [visited, setVisited] = useState(true);\r\n    \r\n    const clickInstructions = () => {\r\n        setVisited(true);\r\n        localStorage.setItem('visited', true);\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        const visited = localStorage.getItem('visited');\r\n        setVisited(visited);\r\n    },[])\r\n\r\n    return <React.Fragment>\r\n            <Header userCounter={userCounter}/>\r\n            <Grid   isLoading={isLoading} \r\n                    userCounter={userCounter}\r\n                    findCol={findCol}\r\n                    onColUpdate={onColUpdate} \r\n                    errorMessage={errorMessage}\r\n                />\r\n                {window.innerWidth < 480 && !visited && \r\n                    <div id=\"instructions\" onClick={clickInstructions}>\r\n                        <img src={`${process.env.PUBLIC_URL}/assets/icons/swipe.png`} alt=\"swip\"/>\r\n                        <h4>\r\n                            You can swipe left or right to change the column.\r\n                        </h4>\r\n                    </div>\r\n                }\r\n    </React.Fragment>\r\n}\r\n\r\nexport default GridView;\r\n"],"sourceRoot":""}