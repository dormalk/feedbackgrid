{"version":3,"sources":["shared/components/NotificationSnackbar/NotificationSnackbar.js","shared/components/Header/Header.js","shared/components/ErrorSnack/ErrorSnack.js","shared/components/LoadingSplash/LoadingSplash.js","App.js","reportWebVitals.js","index.js"],"names":["NotificationSnackbar","message","ReactDOM","createPortal","className","document","getElementById","Header","userCounter","gid","useParams","useState","notificationMessage","setNotificationMessage","Fragment","onClick","navigator","clipboard","writeText","window","location","origin","setTimeout","src","alt","ErrorSnack","error","LoadingSplash","CreateGridPage","React","lazy","GridView","App","fallback","exact","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","render","StrictMode"],"mappings":"qMAeeA,EAXc,SAAC,GAAe,IAAdC,EAAa,EAAbA,QAC3B,OAAOC,IAASC,aACZ,qBAAKC,UAAS,6BAAwBH,EAAU,OAAS,IAAzD,SACI,qBAAKG,UAAU,8BAAf,SACKH,MAGbI,SAASC,eAAe,uBCuBbC,IA5BA,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,YACLC,EAAQC,cAARD,IADsB,EAEwBE,mBAAS,MAFjC,mBAEvBC,EAFuB,KAEFC,EAFE,KAY9B,OAAO,eAAC,IAAMC,SAAP,WACH,mCACI,oBAAIV,UAAU,OAAd,2BACA,sBAAKA,UAAU,OAAf,UACI,sBAAKA,UAAU,YAAYW,QAZb,WACtBC,UAAUC,UAAUC,UAApB,UAAiCC,OAAOC,SAASC,OAAjD,qBAAoEZ,EAApE,eACAI,EAAuB,kEACvBS,YAAW,WACPT,EAAuB,QACxB,MAOK,UACI,oDACA,qBAAKU,IAAG,UApBc,iBAoBd,cAA2BC,IAAI,aAE3C,qBAAKpB,UAAU,UAAf,SAA0BI,UAGlC,cAAC,EAAD,CAAsBP,QAASW,S,gJCdxBa,EAXI,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAClB,OAAOxB,IAASC,aACZ,qBAAKC,UAAS,sBAAiBsB,EAAQ,OAAS,IAAhD,SACI,qBAAKtB,UAAU,uBAAf,SACKsB,MAIbrB,SAASC,eAAe,gBCMbqB,G,MAdO,WAClB,OACI,qBAAKvB,UAAU,iBAAf,SACI,sBAAKA,UAAU,0BAAf,UACI,qBAAQmB,IAAG,UANe,iBAMf,YACHC,IAAI,GACJpB,UAAU,yBAClB,0CACA,8C,kLCTVwB,EAAiBC,IAAMC,MAAK,kBAAM,gCAClCC,EAAWF,IAAMC,MAAK,kBAAM,sDAanBE,EAXH,WACV,OAAO,cAAC,WAAD,CAAUC,SAAU,cAAC,IAAD,IAApB,SACL,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,QAAS,cAACR,EAAD,MAC/B,cAAC,IAAD,CAAOO,KAAK,iBAAiBC,QAAS,cAACL,EAAD,cCC/BM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdpC,IAAS4C,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF1C,SAASC,eAAe,SAM1B+B,M","file":"static/js/main.ca33cef3.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './NotificationSnackbar.css'\r\nimport ReactDOM from 'react-dom';\r\n\r\nconst NotificationSnackbar = ({message}) => {\r\n    return ReactDOM.createPortal(    \r\n        <div className={`notification-snack ${message ? 'show' : ''}`}>\r\n            <div className=\"notification-snack__message\">\r\n                {message}\r\n            </div>\r\n        </div>,\r\n    document.getElementById('notification-hook'))\r\n}\r\n\r\n\r\nexport default NotificationSnackbar;","import React,{useState} from \"react\";\r\nimport './Header.css';\r\nimport { useParams } from \"react-router\";\r\nimport NotificationSnackbar from '../NotificationSnackbar/NotificationSnackbar';\r\nconst iconPath = process.env.PUBLIC_URL + '/assets/icons/';\r\n\r\nconst Header = ({userCounter}) => {\r\n    const { gid } = useParams();\r\n    const [notificationMessage, setNotificationMessage] = useState(null);\r\n\r\n    const onClickRoomNumber = () => {\r\n        navigator.clipboard.writeText(`${window.location.origin}/gridview/${gid}?mode=join`);\r\n        setNotificationMessage('Room url copied to clipboard, now you can share it with others');\r\n        setTimeout(() => {\r\n            setNotificationMessage(null);\r\n        }, 3000);\r\n    }\r\n\r\n    return <React.Fragment>\r\n        <header>\r\n            <h1 className=\"logo\">FEEDBACK GRID</h1>\r\n            <div className=\"room\">\r\n                <div className=\"share-btn\" onClick={onClickRoomNumber}>\r\n                    <span>Get Url to share</span>\r\n                    <img src={`${iconPath}/share.png`} alt=\"share\" />\r\n                </div>\r\n                <div className=\"viewers\">{userCounter}</div>\r\n            </div>\r\n        </header>\r\n        <NotificationSnackbar message={notificationMessage}/>\r\n    </React.Fragment>\r\n}\r\n\r\n\r\nexport default Header;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './ErrorSnack.css'\r\n\r\nconst ErrorSnack = ({ error }) => {\r\n    return ReactDOM.createPortal(    \r\n        <div className={`error-snack ${error ? 'show' : ''}`}>\r\n            <div className=\"error-snack__message\">\r\n                {error}\r\n            </div>\r\n\r\n        </div>,\r\n    document.getElementById('error-hook'))\r\n}\r\n\r\nexport default ErrorSnack;","import React from 'react';\r\nimport './LoadingSplash.css'\r\nconst iconPath = process.env.PUBLIC_URL + '/assets/icons/';\r\n\r\nconst LoadingSplash = () => {\r\n    return (\r\n        <div className=\"loading-splash\">\r\n            <div className=\"loading-splash__spinner\">\r\n                <img    src={`${iconPath}grid.png`} \r\n                        alt=\"\" \r\n                        className=\"loading-splash__icon\"/>\r\n                <h2>FEEDBACK</h2>\r\n                <h3>GRID</h3>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LoadingSplash;","import React,{Suspense} from \"react\";\r\nimport { BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\r\nimport { LoadingSplash } from \"./shared/components\";\r\nconst CreateGridPage = React.lazy(() => import(\"./pages/CreateGridPage/CreateGridPage\"));\r\nconst GridView = React.lazy(() => import(\"./pages/GridView/GridView\"));\r\n\r\nconst App = () => {\r\n  return <Suspense fallback={<LoadingSplash/>}>\r\n    <Router>\r\n      <Routes>\r\n        <Route exact path=\"/\" element={<CreateGridPage/>} />\r\n        <Route path=\"/gridview/:gid\" element={<GridView/>} />\r\n      </Routes>\r\n    </Router>\r\n  </Suspense>\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}