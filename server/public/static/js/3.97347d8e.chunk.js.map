{"version":3,"sources":["helpers/uid.js","shared/components/Header/Header.js","helpers/text.js","pages/GridView/components/AddInput/AddInput.js","pages/GridView/components/Reactions/Reactions.js","pages/GridView/components/Feedback/Feedback.js","pages/GridView/components/Col/Col.js","hooks/grid-hook.js","shared/components/ErrorSnack/ErrorSnack.js","pages/GridView/components/Grid/Grid.js","pages/GridView/GridView.js"],"names":["generateUid","Math","random","toString","substr","getMyUid","myUid","localStorage","getItem","newUid","setItem","Header","className","isRTL","s","RegExp","test","iconPath","AddInput","onNew","useState","isOpen","setIsOpen","inputRef","useRef","inputValue","setInputValue","handleSend","event","preventDefault","stopPropagation","type","style","direction","ref","placeholder","value","onKeyUp","keyCode","onChange","target","onBlur","setTimeout","src","alt","onMouseDown","current","focus","Reactions","dislikes","loves","celebrates","evils","onPick","onClick","Feedback","reactions","onReaction","createdBy","onDelete","React","myVote","setMyVote","right","left","reaction","Col","title","icon","onUpdate","feedbacks","bodyRef","map","item","index","newItems","splice","handleDelete","createBy","handleReactions","createdItem","updatedItems","concat","scrollTop","scrollHeight","socket","socketIOClient","process","useGrid","gid","gridId","setGridId","gridCols","setGridCols","isLoading","setIsLoading","errorMessage","setErrorMessage","fetchGrid","useCallback","fetch","then","res","json","grid","cols","catch","err","updateErrorMessage","finally","initGrid","emit","on","requestedSocket","id","useEffect","onColUpdate","tempCols","col","find","name","method","body","JSON","stringify","headers","console","log","msg","findCol","ErrorSnack","error","ReactDOM","createPortal","document","getElementById","ColsData","DELTEA","window","innerWidth","Grid","useParams","gridRef","handleEndTouch","scrollLeft","currentOffset","currentCol","floor","scrollTo","behavior","addEventListener","Fragment","GridView"],"mappings":"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","file":"static/js/3.97347d8e.chunk.js","sourcesContent":["export const generateUid = () => {\r\n    return Math.random().toString(36).substr(2, 9);\r\n}\r\n\r\nexport const getMyUid = () => {\r\n    const myUid = localStorage.getItem('myUid');\r\n    if (myUid) {\r\n        return myUid;\r\n    } else {\r\n        const newUid = generateUid();\r\n        localStorage.setItem('myUid', newUid);\r\n        return newUid;\r\n    }\r\n}\r\n\r\nexport default generateUid;","import React from \"react\";\r\nimport './Header.css';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header>\r\n            <h1 className=\"logo\">FEEDBACK GRID</h1>\r\n        </header>\r\n    );\r\n}\r\n\r\n\r\nexport default Header;","\r\nexport const isRTL = (s) => {\r\n    var ltrChars    = 'A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02B8\\u0300-\\u0590\\u0800-\\u1FFF'+'\\u2C00-\\uFB1C\\uFDFE-\\uFE6F\\uFEFD-\\uFFFF',\r\n    rtlChars    = '\\u0591-\\u07FF\\uFB1D-\\uFDFD\\uFE70-\\uFEFC',\r\n    rtlDirCheck = new RegExp('^[^'+ltrChars+']*['+rtlChars+']');\r\n    return rtlDirCheck.test(s);\r\n}","import React,{useState, useRef} from \"react\";\r\nimport './AddInput.css'\r\nimport { isRTL } from \"../../../../helpers/text\";\r\n\r\nconst iconPath = process.env.PUBLIC_URL + '/assets/icons/';\r\n\r\nconst AddInput = ({className, onNew}) => {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const inputRef = useRef(null);\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleClickPlus = (event) => {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        setIsOpen(true);\r\n        inputRef.current.focus();\r\n    }\r\n\r\n    const handleSend = (event) => {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        onNew(inputValue);\r\n        setInputValue('')\r\n    }\r\n\r\n    const handleChangeInput = (event) => {\r\n        setInputValue(event.target.value);\r\n    }\r\n\r\n    const onKeyUpHandler = (event) => {\r\n        if(event.keyCode === 13) {\r\n            handleSend(event);\r\n        }\r\n    }\r\n\r\n\r\n    return <div className={`wrapper ${className}`}>\r\n        <div className={`input-wrapper ${isOpen ? 'open' : ''}`}>\r\n            <input  type=\"text\" \r\n                    style={{direction: isRTL(inputValue) ? 'rtl' : 'ltr'}}\r\n                    ref={inputRef}\r\n                    placeholder=\"Add new item\" \r\n                    value={inputValue}\r\n                    onKeyUp={onKeyUpHandler}\r\n                    onChange={handleChangeInput}\r\n                    onBlur={() => setTimeout(() => setIsOpen(false), 200)}\r\n                    className=\"c-input\"/>\r\n        </div>\r\n        {\r\n            isOpen ? \r\n            <img    src={`${iconPath}send.png`} \r\n                    alt=\"\" \r\n                    onMouseDown={handleSend}\r\n                    className=\"send-btn\"/>:\r\n            <img    src={`${iconPath}plus.png`} \r\n                    alt=\"\" \r\n                    onMouseDown={handleClickPlus}\r\n                    className=\"new-btn\"/>\r\n        }\r\n    </div>\r\n}\r\n\r\nexport default AddInput;","import React from 'react';\r\nimport './Reactions.css'\r\nconst iconPath = process.env.PUBLIC_URL + '/assets/icons/';\r\n\r\n\r\nconst Reactions = ({dislikes,loves,celebrates,evils, onPick}) => {\r\n    return <div className=\"reactions\">\r\n\r\n        <div className=\"reaction\" onClick={()=>onPick('loves')}>\r\n            <span>{loves}</span>\r\n            <img    src={`${iconPath}heart-color.png`} \r\n                    alt=\"heart\"/>\r\n        </div>\r\n        <div className=\"reaction\" onClick={()=>onPick('dislikes')}>\r\n            <span>{dislikes}</span>\r\n            <img    src={`${iconPath}dislike-color.png`} \r\n                    alt=\"dislike\"/>\r\n        </div>\r\n        <div className=\"reaction\" onClick={()=>onPick('celebrates')}>\r\n            <span>{celebrates}</span>\r\n            <img    src={`${iconPath}confetti-color.png`} \r\n                    alt=\"confetti\"/>\r\n        </div>\r\n        <div className=\"reaction\" onClick={()=>onPick('evils')}>\r\n            <span>{evils}</span>\r\n            <img    src={`${iconPath}devil-color.png`} \r\n                    alt=\"evil\"/>\r\n        </div>\r\n        \r\n    </div>\r\n}\r\n\r\nexport default Reactions;","import React from \"react\";\r\nimport './Feedback.css'\r\nimport Reactions from \"../Reactions/Reactions\";\r\nimport { getMyUid } from \"../../../../helpers/uid\";\r\nimport { isRTL } from \"../../../../helpers/text\";\r\nconst Feedback = ({value, reactions,onReaction,createdBy, onDelete}) => {\r\n    const [myVote, setMyVote] = React.useState('');\r\n    const handleReaction = (reaction) => {\r\n        if(myVote !== ''){\r\n            reactions[myVote]--\r\n        }        \r\n        reactions[reaction]++;\r\n        setMyVote(reaction);\r\n        onReaction(reactions)\r\n\r\n    }\r\n\r\n    return <div className=\"card\" >\r\n        {createdBy === getMyUid() && <div className=\"card-remove\" onClick={onDelete} style={{right: isRTL(value) ? 'unset' : '1rem', left: isRTL(value) ? '1rem' : 'unset'}}>x</div>}\r\n        <div className={`card-body ${isRTL(value) ? 'rtl' : ''}`} >{value}</div>\r\n        <hr/>\r\n        <div className=\"card-footer\">\r\n            <Reactions  evils={reactions.evils} \r\n                        dislikes={reactions.dislikes}\r\n                        loves={reactions.loves}\r\n                        onPick={handleReaction}\r\n                        celebrates={reactions.celebrates}/>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default Feedback;","import React,{useRef} from \"react\";\r\nimport AddInput from \"../AddInput/AddInput\";\r\nimport Card from \"../Feedback/Feedback\";\r\nimport './Col.css'\r\nimport {getMyUid} from \"../../../../helpers/uid\";\r\nconst iconPath = process.env.PUBLIC_URL + '/assets/icons/';\r\n\r\nconst Col = ({title, icon, onUpdate,feedbacks = []}) => {\r\n    const bodyRef = useRef(null);\r\n\r\n    const handleNewItem = (value) => {\r\n        if(value === '') return;\r\n        const createdItem = {\r\n            value,\r\n            createBy: getMyUid(),\r\n            reactions: {\r\n                evils: 0,\r\n                dislikes: 0,\r\n                loves: 0,\r\n                celebrates: 0,\r\n            }\r\n        }\r\n        const updatedItems = feedbacks.concat(createdItem); \r\n        setTimeout(() => {\r\n            bodyRef.current.scrollTop = bodyRef.current.scrollHeight;\r\n        })\r\n        onUpdate(updatedItems);\r\n    }\r\n\r\n    const handleReactions = (reaction,index) => {\r\n        const newItems = [...feedbacks];\r\n        newItems[index].reactions[reaction] = newItems[index].reactions[reaction] + 1;\r\n        onUpdate(newItems);\r\n    }\r\n\r\n    const handleDelete = (index) => {\r\n        const newItems = [...feedbacks];\r\n        newItems.splice(index,1);\r\n        onUpdate(newItems);\r\n    }\r\n    \r\n    return <div className=\"col\">\r\n        <div className=\"top\">\r\n            <img src={`${iconPath}${icon}.png`} alt=\"\" className=\"icon\"/>\r\n            <div className=\"title\">{title}</div>\r\n        </div>\r\n        <div className=\"body\" ref={bodyRef}>\r\n            {feedbacks.map((item, index) => <Card   value={item.value}\r\n                                                key={index}\r\n                                                onDelete={() => handleDelete(index)}\r\n                                                createdBy={item.createBy}\r\n                                                reactions={item.reactions}\r\n                                                onReaction={(value) => handleReactions(value,index)}/>)}\r\n        </div>\r\n        <div className=\"footer\">\r\n            <AddInput className=\"add-input\" onNew={handleNewItem}/>\r\n        </div>\r\n    </div>\r\n};\r\n\r\nexport default Col;","import {useState,useEffect,useCallback} from 'react';\r\nimport socketIOClient from \"socket.io-client\";\r\nconst socket = socketIOClient(process.env.REACT_APP_BACKEND_URL);\r\n\r\n\r\nconst useGrid = (gid) => {\r\n    const [gridId, setGridId] = useState();\r\n    const [gridCols, setGridCols] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [errorMessage, setErrorMessage] = useState();\r\n\r\n    const fetchGrid = useCallback((gid) => {\r\n        fetch(`${process.env.REACT_APP_BACKEND_URL}/api/grid/${gid}`)\r\n        .then(res => res.json())\r\n        .then(res => {\r\n            setGridCols(res.grid.cols)\r\n        })\r\n        .catch(err => updateErrorMessage('We Could not fetch grid, please check you connection'))\r\n        .finally(() => setIsLoading(false))\r\n    },[])\r\n\r\n    const initGrid = useCallback(() => {\r\n        if(gid !== null) {\r\n            setGridId(gid)\r\n            fetchGrid(gid);\r\n            socket.emit('joinRoom', gid);\r\n    \r\n            socket.on(\"fetchGrid\", requestedSocket => {\r\n                if(socket.id === requestedSocket) return;\r\n                fetchGrid(gid);\r\n            });\r\n        } else {\r\n            updateErrorMessage(\"Grid not found\");\r\n        }\r\n    },[gid,fetchGrid]);\r\n\r\n    useEffect(() => {\r\n        initGrid();\r\n    },[initGrid])\r\n\r\n    \r\n\r\n \r\n\r\n    const findCol = (id) => {\r\n        const col = gridCols.find(col => col.name === id)\r\n        if(col) return col.feedbacks;\r\n        return []\r\n    }\r\n\r\n    const onColUpdate = useCallback((id, feedbacks) => {\r\n        const tempCols = gridCols; \r\n        const col = tempCols.find(col => col.name === id)\r\n        if(col) {\r\n            setGridCols([...tempCols])\r\n            col.feedbacks = feedbacks;\r\n            fetch(`${process.env.REACT_APP_BACKEND_URL}/api/grid/${gridId}`, {\r\n                method: 'POST',\r\n                body: JSON.stringify({\r\n                    grid: {\r\n                        cols: tempCols\r\n                    }}),\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            })\r\n            .then(res => {\r\n                socket.emit('fetchGridRequest', gridId);\r\n            })\r\n            .catch(err => console.log(err))\r\n        }\r\n    },[gridCols, gridId])\r\n\r\n\r\n    const updateErrorMessage = (msg) => {\r\n        setErrorMessage(msg);\r\n        setTimeout(() => {\r\n            setErrorMessage(null);\r\n        },3000)\r\n    }\r\n\r\n    return {isLoading, findCol, onColUpdate, errorMessage}\r\n}\r\n\r\n\r\nexport default useGrid;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './ErrorSnack.css'\r\n\r\nconst ErrorSnack = ({ error }) => {\r\n    return ReactDOM.createPortal(    \r\n        <div className={`error-snack ${error ? 'show' : ''}`}>\r\n            <div className=\"error-snack__message\">\r\n                {error}\r\n            </div>\r\n\r\n        </div>,\r\n    document.getElementById('error-hook'))\r\n}\r\n\r\nexport default ErrorSnack;","import React,{useRef, useCallback} from \"react\";\r\nimport { useParams } from \"react-router\";\r\nimport Col from \"../Col/Col\";\r\nimport './Grid.css'\r\nimport useGrid from \"../../../../hooks/grid-hook\";\r\nimport { ErrorSnack } from \"../../../../shared/components\";\r\n\r\n\r\nconst ColsData = [\r\n    {\r\n        title: \"Things I Loves\",\r\n        icon: \"heart\",\r\n        id: \"things_love\",\r\n    },\r\n    {\r\n        title: \"Things I dislike\",\r\n        icon: \"dislike\",\r\n        id: \"things_dislike\",\r\n    },\r\n    {\r\n        title: \"Things I wants to improves\",\r\n        icon: \"improve\",\r\n        id: \"things_improve\",\r\n    },\r\n    {\r\n        title: \"New things I have\",\r\n        icon: \"innovation\",\r\n        id: \"things_new\",\r\n    },\r\n]\r\n\r\nconst DELTEA = window.innerWidth / 2;\r\n\r\nconst Grid = () => {\r\n    const { gid } = useParams();\r\n    const gridRef = useRef(null);\r\n    const {isLoading, findCol, onColUpdate,errorMessage} = useGrid(gid);\r\n\r\n    const handleEndTouch = useCallback(event => {\r\n        const { scrollLeft } = gridRef.current;\r\n        const currentOffset = scrollLeft % window.innerWidth;\r\n        const currentCol = Math.floor(scrollLeft / window.innerWidth);\r\n\r\n        if(currentOffset > DELTEA){\r\n            gridRef.current.scrollTo({\r\n                left: (currentCol + 1) * window.innerWidth,\r\n                behavior: 'smooth'\r\n            });\r\n        } else {\r\n            gridRef.current.scrollTo({\r\n                left: currentCol * window.innerWidth,\r\n                behavior: 'smooth'\r\n            });\r\n        }\r\n\r\n    },[])\r\n    React.useEffect(() => {\r\n        gridRef.current.addEventListener(\"touchend\", handleEndTouch)\r\n        gridRef.current.scrollLeft = 0;\r\n    },[handleEndTouch])\r\n\r\n    return <React.Fragment>\r\n        <div className=\"grid\" ref={gridRef}>\r\n        {isLoading ?    <div className=\"loader\"></div> :\r\n                            ColsData.map(col => <Col    key={col.id}\r\n                                                        title={col.title}\r\n                                                        icon={col.icon}\r\n                                                        onUpdate={(feedbacks) => onColUpdate(col.id,feedbacks)}\r\n                                                        feedbacks={findCol(col.id)}/>)}\r\n        </div>\r\n        <ErrorSnack error={errorMessage}/>\r\n        </React.Fragment>\r\n};\r\n\r\nexport default Grid;","import React from 'react';\r\nimport Header from '../../shared/components/Header/Header.js';\r\nimport Grid from './components/Grid/Grid.js';\r\n\r\nconst GridView = () => {\r\n    return <React.Fragment>\r\n            <Header />\r\n            <Grid />\r\n    </React.Fragment>\r\n}\r\n\r\nexport default GridView;\r\n"],"sourceRoot":""}