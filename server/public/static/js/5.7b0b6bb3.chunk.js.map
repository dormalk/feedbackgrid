{"version":3,"sources":["helpers/uid.js","pages/CreateGridPage/CreateGridPage.js"],"names":["generateUid","Math","random","toString","substr","getMyUid","myUid","localStorage","getItem","newUid","setItem","CreateGridPage","React","useState","gridId","setGridId","navigate","useNavigate","className","style","borderWidth","borderColor","to","type","onChange","e","target","value","href","onClick","undefined","alert","fetch","process","then","res","ok","Error","catch","err","disabled"],"mappings":"qHAAA,oEAAO,IAAMA,EAAc,WACvB,OAAOC,KAAKC,SAASC,SAAS,IAAIC,OAAO,EAAG,IAGnCC,EAAW,WACpB,IAAMC,EAAQC,aAAaC,QAAQ,SACnC,GAAIF,EACA,OAAOA,EAEP,IAAMG,EAAST,IAEf,OADAO,aAAaG,QAAQ,QAASD,GACvBA,I,4HCuCAE,UA5CQ,WAAO,IAAD,EACGC,IAAMC,WADT,mBAClBC,EADkB,KACVC,EADU,KAEnBC,EAAWC,cAmBjB,OAAO,qBAAKC,UAAU,YAAf,SACH,sBAAKA,UAAU,OAAf,UACI,+CACA,6CAAe,8CAAf,qGACA,oBAAIC,MAAO,CAACC,YAAa,QAASC,YAAa,eAC/C,sBAAKH,UAAU,eAAf,UACI,cAAC,IAAD,CAAMI,GAAE,oBAAetB,cAAf,aAAyCkB,UAAU,YAA3D,wCAGA,qBAAKA,UAAU,cAAf,gBACA,gCACA,uBAAOK,KAAK,OAAOL,UAAU,aAAaM,SA7B5B,SAACC,GACvBV,EAAUU,EAAEC,OAAOC,UA6BP,wBAAQC,KAAM,KAAMC,QA1Bb,WACL,KAAXf,QAA4BgB,IAAXhB,EAChBiB,MAAM,0BAENC,MAAM,GAAD,OAAIC,sCAAJ,2BAAwDnB,IAC5DoB,MAAK,SAAAC,GACF,IAAIA,EAAIC,GAAI,MAAM,IAAIC,MAAM,uBACvBrB,EAAS,aAAD,OAAcF,EAAd,kBAEhBwB,OAAM,SAAAC,GAAG,OAAIR,MAAMQ,OAiBiCrB,UAAU,WAAWsB,SAAqB,KAAX1B,QAA4BgB,IAAXhB,EAA7F","file":"static/js/5.7b0b6bb3.chunk.js","sourcesContent":["export const generateUid = () => {\r\n    return Math.random().toString(36).substr(2, 9);\r\n}\r\n\r\nexport const getMyUid = () => {\r\n    const myUid = localStorage.getItem('myUid');\r\n    if (myUid) {\r\n        return myUid;\r\n    } else {\r\n        const newUid = generateUid();\r\n        localStorage.setItem('myUid', newUid);\r\n        return newUid;\r\n    }\r\n}\r\n\r\nexport default generateUid;","import React from 'react';\r\nimport './CreateGridPage.css';\r\nimport { Link } from \"react-router-dom\";\r\nimport {generateUid} from '../../helpers/uid';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst CreateGridPage = () => {\r\n    const [gridId, setGridId] = React.useState();\r\n    const navigate = useNavigate();\r\n    const handleInputChange = (e) => {\r\n        setGridId(e.target.value)\r\n    }\r\n\r\n    const handleNavigate = () => {\r\n        if(gridId === '' || gridId === undefined) {\r\n            alert('Please enter a grid id')\r\n        } else {\r\n            fetch(`${process.env.REACT_APP_BACKEND_URL}/api/grid/check/${gridId}`)\r\n            .then(res => {\r\n                if(!res.ok) throw new Error('Grid does not exist')\r\n                else navigate(`/gridview/${gridId}?mode=join`) \r\n            })\r\n            .catch(err => alert(err))\r\n        }\r\n    \r\n    }\r\n\r\n    return <div className=\"container\">\r\n        <div className=\"card\">\r\n            <h3>FEEDBACK GRID</h3>\r\n            <p>With online <b>FEEDBACK GRID</b> you can create interactive grid to qustions your team and get anonynus and authentic feedback.</p>\r\n            <hr style={{borderWidth: '0.2px', borderColor: 'lightgrey'}}/>\r\n            <div className=\"card__footer\">\r\n                <Link to={`/gridview/${generateUid()}?mode=new`} className=\"btn start\">\r\n                    START ONLINE FEEDBACK GRID\r\n                </Link>\r\n                <div className=\"or-dlimeter\">or</div>\r\n                <div>\r\n                <input type=\"text\" className=\"join-input\" onChange={handleInputChange}/>\r\n                    <button href={null} onClick={handleNavigate} className=\"btn join\" disabled={gridId === '' || gridId === undefined}>\r\n                        JOIN NOW\r\n                    </button>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    </div>\r\n \r\n}\r\n\r\nexport default CreateGridPage;\r\n"],"sourceRoot":""}